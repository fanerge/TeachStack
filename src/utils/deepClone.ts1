import { checkType } from '../modules/utils';

/**
 * https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1
 * 深拷贝注意事项
 * 1. 循环引用（开辟存储空间WeakMap，来存储当前对象和拷贝对象的对应关系，当拷贝对象时，先去存储空间找，如果有则直接返回，否者添加到存储空间）
 * 2. 递归爆栈（递归转循环）
 * 3. 保留引用
 */
export function cloneOther(obj: any, hash = new WeakMap()) {
  // typeof 为 非'object'(包含null、undefined、boolean、number、string、bigint、symbol、function)
  const objType: any = typeof obj;
  if(objType !== 'object' || obj === null) {
    if(objType === 'bigint') {
      debugger
      return BigInt(obj);
    }

    // null、undefined、boolean、number
    return obj;
  }

  // typeof 为(Arary、Object、Date、RegExp、Map、Set)

}



/**
 * 深拷贝（循环引用）
 * @param obj 
 * @param hash （hash = new WeakMap()考虑循环引用的问题）
 * [](https://yanhaijing.com/javascript/2018/10/10/clone-deep/)
 */
export function deepClone(obj: any, hash = new WeakMap()) : any{
  if(checkType(obj) === 'RegExp') {
      // regExp.source 正则对象的源模式文本;
      // regExp.flags 正则表达式对象的标志字符串;
      // regExp.lastIndex 下次匹配开始的字符串索引位置
      let temp =  new RegExp(obj.source, obj.flags);
      temp.lastIndex = obj.lastIndex;
      return temp;
  }
  if(checkType(obj) === 'Date') {
      return new Date(obj);
  }
  // 非复杂类型(null、undefined、string、number、symbol、boolean、function)
  if(obj === null || typeof obj !== 'object') {
      return obj;
  }
  if(hash.has(obj)) {
      return hash.get(obj);
  }

  let newObj = new obj.constructor();
  hash.set(obj, newObj);
  Object.keys(obj).forEach(function(key) {
      if(typeof obj[key] === 'object' && obj[key] !== null) {
          newObj[key] = deepClone(obj[key], hash);
      }else{
          newObj[key] = obj[key];
      }
  });

  return newObj;
}

// 递归实现容易爆栈（解决思路：递归转循环）
/**
 * 递归实现容易爆栈（解决思路：递归转循环）
 * 用循环遍历一棵树，需要借助一个栈，当栈为空时就遍历完了，栈里面存储下一个需要拷贝的节点
 * 首先我们往栈里放入种子数据，key用来存储放哪一个父元素的那一个子元素拷贝对象
 * 然后遍历当前节点下的子元素，如果是对象就放到栈里，否则直接拷
 */

export function cloneLoop(x: any) {
  const root = {};
  // 栈
  const loopList = [
    {
      parent: root,
      key: undefined,
      data: x
    }
  ];
  // debugger
  while(loopList.length) {
      // 深度优先
      const node = loopList.pop();
      const parent = node.parent;
      const key = node.key;
      const data = node.data;

      // 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素
      let res = parent;
      if (typeof key !== 'undefined') {
          res = parent[key] = {};
      }

      Object.entries(data).forEach(item => {
          if(typeof item[1] === 'object' && item[1] !== null) {
            // 下一次循环
            loopList.push({
                parent: res,
                key: item[0],
                data: item[1],
            });
          }else {
            res[item[0]] = item[1];
          }
      });
  }

  return root;
}

// 测试浏览器最大调用栈
// var i = 0;
// function recursiveFn() {
//     i += 1;
//     recursiveFn();
// }
// try {
//     recursiveFn();
// } catch (ex) {
// 	console.log('i = ' + i + ' error: ' + ex);
// }