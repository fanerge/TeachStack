import { checkType } from '../modules/utils';

// 递归实现容易爆栈（解决思路：递归转循环）
/**
 * 递归实现容易爆栈（解决思路：递归转循环）
 * 用循环遍历一棵树，需要借助一个栈，当栈为空时就遍历完了，栈里面存储下一个需要拷贝的节点
 * 首先我们往栈里放入种子数据，key用来存储放哪一个父元素的那一个子元素拷贝对象
 * 然后遍历当前节点下的子元素，如果是对象就放到栈里，否则直接拷
 */

export function cloneLoop(x: any) {
  const root = {};
  // 栈
  const loopList = [
    {
      parent: root,
      key: undefined,
      data: x
    }
  ];
  // debugger
  while(loopList.length) {
      // 深度优先
      const node = loopList.pop();
      const parent = node.parent;
      const key = node.key;
      const data = node.data;

      // 初始化赋值目标，key为undefined则拷贝到父元素，否则拷贝到子元素
      let res = parent;
      if (typeof key !== 'undefined') {
          res = parent[key] = {};
      }

      Object.entries(data).forEach(item => {
          if(typeof item[1] === 'object' && item[1] !== null) {
            // 下一次循环
            loopList.push({
                parent: res,
                key: item[0],
                data: item[1],
            });
          }else {
            res[item[0]] = item[1];
          }
      });
  }

  return root;
}

// 测试浏览器最大调用栈
// var i = 0;
// function recursiveFn() {
//     i += 1;
//     recursiveFn();
// }
// try {
//     recursiveFn();
// } catch (ex) {
// 	console.log('i = ' + i + ' error: ' + ex);
// }